name: Integration Workflow

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Yarn Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Packages
        run: yarn install

      - name: Check for Linting Issues
        run: yarn run lint

      - name: Build Project
        run: yarn run dev:build

  deploy:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Set up SSH Connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.USERNAME }}
          passphrase: ${{secrets.PASSWORD}}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -e
            echo "Changing directory to /www/wwwroot/APIS/euapi"
            if ! cd /www/wwwroot/APIS/euapi; then
              echo "Failed to change directory as required"
              exit 1
            fi
            echo "Pulling latest code from origin/main"
            if ! git pull origin main; then
              echo "Failed to pull latest code"
              exit 1
            fi
            echo "Installing dependencies"
            if ! yarn install; then
              echo "Failed to install dependencies as required"
              exit 1
            fi
            echo "Stopping server to rebuild"
            if ! yarn run docker:stop; then
              echo "Couldn't stop Docker containers"
              exit 1
            fi
            echo "Building development files"
            if ! yarn run docker:build; then
              echo "Failed to build development server"
              exit 1
            fi
            echo "Running deployment"
            if ! yarn run docker:run; then
              echo "Failed to start server"
              exit 1
            fi
            echo "Deployment successful"
